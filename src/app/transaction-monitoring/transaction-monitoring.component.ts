import { Component, ViewChild, OnInit, AfterViewInit } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { MatPaginator } from '@angular/material/paginator';

@Component({
  selector: 'app-transaction-monitoring',
  templateUrl: './transaction-monitoring.component.html',
  styleUrls: ['./transaction-monitoring.component.css']
})
export class TransactionMonitoringComponent implements OnInit, AfterViewInit{
  //Empty string to populate with the data generated by the for loop
  Transdata: any[] = []; 
  TransactionData: MatTableDataSource<any> = new MatTableDataSource<any>();
  //Columns for the table being defined
  TransactionColumns: string[] = [
    'PaymentID',
    'Disposition',
    'PaymentStatus',
    'FundStatus',
    'Analyst',
    'Risk',
    'PaymentDate',
    'Status',
    'RiskScore',
    'TestFailed',
    'Flags',
    'BuyerName',
    'SupplierName',
    'VMSID',
    'PaymentAmount',
    'PaymentZScore',
    'AveragePayment',
    'AvgPaymentSTDev',
    'MaxB2SPayment',
    'MinB2SPayment',
    'PaymentMethod',
    'SupplierAccCreation',
    'LastSupplierContactUpdate',
    'SupplierStreetAddress',
    'SupplierCity',
    'SupplierState',
    'SupplierCountry',
    'SupplierZip',
    'SupplierIndustry',
    'SupplierTaxID',
    'SupplierAccountUpdate',
    'PreviousPayment',
    'TotalBuyerPayment',
    'TotalBuyerSpend',
    'TotalSupplierPayment',
    'TotalSupplierSpend',
    'TotalB2SPayment',
    'TotalB2SSpend',
    'TotalBFS',
    'TotalSFB',
    'DaysSinceSAU',
    'DaysSinceSCU',
    'DaysSinceSAC',
    'PaymentsSinceSAU',
    'LastAPD',
    'TotalBAVP',
    'TotalBAVPLE',
    'TotalSCFM',
    'TotalSCFMLE',
    'Comments'
  ];

  //Viewchild to connect the paginator to the data
  @ViewChild('TransactionPaginator', { read: MatPaginator }) TransactionPaginator: any = MatPaginator;

  //OnInit the generateTransactionData function will be called and will generate the given number of rows of data
  //In this case 20 rows 
  ngOnInit() {
    this.generateTransactionData(20);
  }

  //A continuation of defining the paginator so it is linked to the data
  ngAfterViewInit() {
    this.TransactionData.paginator = this.TransactionPaginator
  }

  //Loop that generates data for each column and generates the number given by the function within the OnInit
  generateTransactionData(numRows: number) {
    for (let i = 1; i <= numRows; i++) {
      const row = {
        PaymentID: `${i + 897762193}`,
        Disposition: `Disposition ${i}`,
        PaymentStatus: `PaymentStatus ${i}`,
        FundStatus: `FundStatus ${i}`,
        Analyst: `Analyst ${i}`,
        Risk: `Risk ${i}`,
        PaymentDate: `PaymentDate ${i}`,
        Status: `Status ${i}`,
        RiskScore: `${i+22}`,
        TestFailed: `${i}`,
        Flags: `Flags ${i}`,
        BuyerName: `BuyerName ${i}`,
        SupplierName: `SupplierName ${i}`,
        VMSID: `${i+12409123854812309}`,
        PaymentAmount: `PaymentAmount ${i}`,
        PaymentZScore: `PaymentZScore ${i}`,
        AveragePayment: `AveragePayment ${i}`,
        AvgPaymentSTDev: `AvgPaymentSTDev ${i}`,
        MaxB2SPayment: `MaxB2SPayment ${i}`,
        MinB2SPayment: `MinB2SPayment ${i}`,
        PaymentMethod: `PaymentMethod ${i}`,
        SupplierAccCreation: `SupplierAccCreation ${i}`,
        LastSupplierContactUpdate: `LastSupplierContactUpdate ${i}`,
        SupplierStreetAddress: `SupplierStreetAddress ${i}`,
        SupplierCity: `SupplierCity ${i}`,
        SupplierState: `SupplierState ${i}`,
        SupplierCountry: `SupplierCountry ${i}`,
        SupplierZip: `SupplierZip ${i}`,
        SupplierIndustry: `SupplierIndustry ${i}`,
        SupplierTaxID: `SupplierTaxID ${i}`,
        SupplierAccountUpdate: `SupplierAccountUpdate ${i}`,
        PreviousPayment: `PreviousPayment ${i}`,
        TotalBuyerPayment: `TotalBuyerPayment ${i}`,
        TotalBuyerSpend: `TotalBuyerSpend ${i}`,
        TotalSupplierPayment: `TotalSupplierPayment ${i}`,
        TotalSupplierSpend: `TotalSupplierSpend ${i}`,
        TotalB2SPayment: `TotalB2SPayment ${i}`,
        TotalB2SSpend: `TotalB2SSpend ${i}`,
        TotalBFS: `TotalBFS ${i}`,
        TotalSFB: `TotalSFB ${i}`,
        DaysSinceSAU: `DaysSinceSAU ${i}`,
        DaysSinceSCU: `DaysSinceSCU ${i}`,
        DaysSinceSAC: `DaysSinceSAC ${i}`,
        PaymentsSinceSAU: `PaymentsSinceSAU ${i}`,
        LastAPD: `LastAPD ${i}`,
        TotalBAVP: `TotalBAVP ${i}`,
        TotalBAVPLE: `TotalBAVPLE ${i}`,
        TotalSCFM: `TotalSCFM ${i}`,
        TotalSCFMLE: `TotalSCFMLE ${i}`,
        Comments: `Comments ${i}`
      };
      this.Transdata.push(row);
    }
    //Populate the table with this data
    this.TransactionData = new MatTableDataSource(this.Transdata);
  }

  //Define properties that will have table data passed into them
  payment: any;
  risk: any;
  testfailed: any;
  VMS: any;
  //When a row is selected the values will be passed onto the empty properties just defined
  selectedRow(item: any) {
    this.payment = item.PaymentID
    this.risk = item.Risk
    this.testfailed = item.TestFailed
    this.VMS = item.VMSID
  }


}
